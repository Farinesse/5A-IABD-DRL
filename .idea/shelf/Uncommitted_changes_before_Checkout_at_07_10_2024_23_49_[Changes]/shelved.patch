Index: GUI/Farkel_GUI.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import tkinter as tk\r\nfrom tkinter import messagebox\r\nfrom tkinter import ttk\r\nfrom PIL import Image, ImageTk, ImageOps\r\nfrom environment.FarkelEnv import FarkleEnv\r\n\r\nclass FarkleGUI:\r\n    def __init__(self, master, players=2):\r\n        self.master = master\r\n        self.master.title(\"Farkle - Jeu de Dés\")\r\n        self.master.geometry(\"800x800\")\r\n        self.master.configure(bg='#E0E0E0')\r\n\r\n        self.env = FarkleEnv(num_players=players)\r\n        self.dice_images = {}\r\n        self.selected_dice = []\r\n\r\n        # Ajout de l'initialisation de action_received\r\n        self.action_received = tk.BooleanVar(value=False)\r\n        self.action = None\r\n\r\n        self.create_widgets()\r\n        self.load_dice_images()\r\n        self.update_display()\r\n\r\n    def create_widgets(self):\r\n        self.top_frame = tk.Frame(self.master, bg='#E0E0E0')\r\n        self.top_frame.pack(pady=10)\r\n\r\n        self.player_var = tk.StringVar()\r\n        self.player_label = tk.Label(self.top_frame, textvariable=self.player_var,\r\n                                     font=('Helvetica', 20), bg='#E0E0E0')\r\n        self.player_label.pack()\r\n\r\n        self.round_score_var = tk.StringVar()\r\n        self.round_score_label = tk.Label(self.top_frame, textvariable=self.round_score_var,\r\n                                          font=('Helvetica', 16), bg='#E0E0E0')\r\n        self.round_score_label.pack()\r\n\r\n        self.info_var = tk.StringVar()\r\n        self.info_label = tk.Label(self.top_frame, textvariable=self.info_var,\r\n                                   font=('Helvetica', 12), bg='#E0E0E0', fg='#666666')\r\n        self.info_label.pack()\r\n\r\n        self.dice_frame = tk.Frame(self.master, bg='#E0E0E0')\r\n        self.dice_frame.pack(pady=20)\r\n\r\n        self.dice_labels = []\r\n        for i in range(6):\r\n            label = tk.Label(self.dice_frame, bg='#E0E0E0')\r\n            label.grid(row=0, column=i, padx=5)\r\n            label.bind('<Button-1>', lambda e, i=i: self.toggle_dice(i))\r\n            self.dice_labels.append(label)\r\n\r\n        self.button_frame = tk.Frame(self.master, bg='#E0E0E0')\r\n        self.button_frame.pack(pady=20)\r\n\r\n        self.continue_button = tk.Button(self.button_frame, text=\"Continuer\",\r\n                                         command=lambda: self.take_action(stop=False))\r\n        self.continue_button.pack(side=tk.LEFT, padx=10)\r\n\r\n        self.stop_button = tk.Button(self.button_frame, text=\"Arrêter le tour\",\r\n                                     command=lambda: self.take_action(stop=True))\r\n        self.stop_button.pack(side=tk.LEFT, padx=10)\r\n\r\n        self.scores_frame = tk.Frame(self.master, bg='#E0E0E0')\r\n        self.scores_frame.pack(pady=10)\r\n\r\n        self.score_vars = []\r\n        for i in range(self.env.num_players):\r\n            var = tk.StringVar()\r\n            label = tk.Label(self.scores_frame, textvariable=var,\r\n                             font=('Helvetica', 14), bg='#E0E0E0')\r\n            label.pack()\r\n            self.score_vars.append(var)\r\n\r\n        # Ajouter des barres de progression pour chaque joueur\r\n        self.progress_bars = []\r\n        for i in range(self.env.num_players):\r\n            progress_label = tk.Label(self.scores_frame, text=f\"Progression Joueur {i + 1} :\", bg='#E0E0E0')\r\n            progress_label.pack()\r\n            progress_bar = ttk.Progressbar(self.scores_frame, orient=\"horizontal\", length=300, mode=\"determinate\", maximum=100)\r\n            progress_bar.pack(pady=5)\r\n            self.progress_bars.append(progress_bar)\r\n\r\n    def load_dice_images(self):\r\n        for i in range(1, 7):\r\n\r\n            img = Image.open(f\"../Images/dice{i}.png\")\r\n            img = img.resize((60, 60))\r\n            self.dice_images[i] = ImageTk.PhotoImage(img)\r\n\r\n            # Créer une version \"sélectionnée\" de l'image avec un contour\r\n            selected_img = ImageOps.expand(img, border=3, fill='red')\r\n            self.dice_images[f\"{i}_selected\"] = ImageTk.PhotoImage(selected_img)\r\n\r\n    def toggle_dice(self, index):\r\n        if index < len(self.env.dice_roll):\r\n            if index in self.selected_dice:\r\n                self.selected_dice.remove(index)\r\n            else:\r\n                self.selected_dice.append(index)\r\n            self.update_display()\r\n            self.update_selection_info()\r\n\r\n    def update_selection_info(self):\r\n        if not self.selected_dice:\r\n            self.info_var.set(\"Sélectionnez des dés qui rapportent des points\")\r\n            self.continue_button.config(state=tk.DISABLED)\r\n            return\r\n\r\n        action = self.get_action_from_selection()\r\n        is_valid = self.env._validate_dice_selection(self.env.dice_roll, action[:len(self.env.dice_roll)])\r\n\r\n        if is_valid:\r\n            selected_dice = [self.env.dice_roll[i] for i in self.selected_dice]\r\n            potential_score = self.env._calculate_score(selected_dice)\r\n            self.info_var.set(f\"Sélection valide - Points potentiels : {potential_score}\")\r\n            self.continue_button.config(state=tk.NORMAL)\r\n\r\n        else:\r\n            # Calculer le score potentiel des dés sélectionnés\r\n            selected_dice_values = [self.env.dice_roll[i] for i in self.selected_dice]\r\n            potential_score = self.env._calculate_score(selected_dice_values)\r\n            self.info_var.set(f\"Score potentiel : {potential_score}\")\r\n            self.continue_button.config(state=tk.NORMAL)\r\n\r\n    def take_action(self, stop):\r\n        self.env.stop = stop\r\n\r\n        if self.env.current_player == 1:\r\n            self.play_random()\r\n        else:\r\n            action = self.get_action_from_selection()\r\n\r\n            if not stop and not self.selected_dice:\r\n                messagebox.showinfo(\"Action invalide\", \"Vous devez sélectionner des dés valides avant de continuer.\")\r\n                return\r\n\r\n            observation, reward, done, _, info = self.env.step(action)\r\n\r\n            if info.get(\"invalid_action\", False):\r\n                messagebox.showinfo(\"Action invalide\", \"Sélection de dés non valide\")\r\n            elif info.get(\"farkle\", False):\r\n                lost_points = info.get(\"lost_points\", 0)\r\n                messagebox.showinfo(\"Farkle\", f\"Pas de points! Vous perdez {lost_points} points. Tour terminé.\")\r\n            elif info.get(\"stopped\", False):\r\n                messagebox.showinfo(\"Tour terminé\", f\"Points marqués : {reward}\")\r\n\r\n            self.selected_dice = []\r\n            self.update_display()\r\n\r\n            if done:\r\n                self.game_over()\r\n            elif self.env.current_player == 1:\r\n                self.master.after(1000, self.play_random)\r\n\r\n    def wait_for_action(self):\r\n        self.action_received.set(False)\r\n        self.continue_button.config(state=tk.NORMAL)\r\n        self.stop_button.config(state=tk.NORMAL)\r\n        self.master.wait_variable(self.action_received)\r\n        self.continue_button.config(state=tk.DISABLED)\r\n        self.stop_button.config(state=tk.DISABLED)\r\n        return self.action\r\n\r\n    def play_random(self):\r\n        while self.env.current_player == 1:\r\n            action = self.env.get_random_action()\r\n            observation, reward, done, _, info = self.env.step(action)\r\n\r\n            self.update_display()\r\n            self.master.update()\r\n\r\n            if done:\r\n                self.game_over()\r\n                break\r\n\r\n            if info.get(\"farkle\", False) or info.get(\"stopped\", False):\r\n                break\r\n\r\n            self.master.after(1000)\r\n\r\n        self.update_display()\r\n\r\n    def update_display(self):\r\n        \"\"\"Met à jour l'interface graphique avec l'état actuel du jeu.\"\"\"\r\n        self.player_var.set(f\"Joueur {self.env.current_player + 1}\")\r\n        self.round_score_var.set(f\"Score du tour: {self.env.round_score}\")\r\n\r\n        # Mettre à jour l'affichage des dés\r\n        for i, label in enumerate(self.dice_labels):\r\n            if i < len(self.env.dice_roll):\r\n                dice_value = self.env.dice_roll[i]\r\n                if i in self.selected_dice:\r\n                    label.config(image=self.dice_images[f\"{dice_value}_selected\"])\r\n                else:\r\n                    label.config(image=self.dice_images[dice_value])\r\n            else:\r\n                label.config(image='')\r\n\r\n        # Mettre à jour les scores et barres de progression\r\n        for i, var in enumerate(self.score_vars):\r\n            var.set(f\"Joueur {i + 1}: {self.env.scores[i]}\")\r\n        self.update_progress_bars()\r\n\r\n        self.update_selection_info()\r\n\r\n    def update_progress_bars(self):\r\n        \"\"\"Met à jour les barres de progression pour chaque joueur.\"\"\"\r\n        for i, progress_bar in enumerate(self.progress_bars):\r\n            progress = (self.env.scores[i] / self.env.target_score) * 100\r\n            progress_bar['value'] = progress\r\n\r\n    def game_over(self):\r\n        winner = self.env.current_player + 1\r\n        messagebox.showinfo(\"Fin du jeu\",\r\n                            f\"Joueur {winner} gagne avec {self.env.scores[self.env.current_player]} points!\")\r\n        if messagebox.askyesno(\"Nouvelle partie\", \"Voulez-vous commencer une nouvelle partie?\"):\r\n            self.env.reset()\r\n            self.selected_dice = []\r\n            self.update_display()\r\n        else:\r\n            self.master.quit()\r\n\r\ndef main_gui(players=2):\r\n    root = tk.Tk()\r\n    app = FarkleGUI(root, players)\r\n    root.mainloop()\r\n\r\nif __name__ == \"__main__\":\r\n    main_gui()\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/GUI/Farkel_GUI.py b/GUI/Farkel_GUI.py
--- a/GUI/Farkel_GUI.py	
+++ b/GUI/Farkel_GUI.py	
@@ -15,7 +15,6 @@
         self.dice_images = {}
         self.selected_dice = []
 
-        # Ajout de l'initialisation de action_received
         self.action_received = tk.BooleanVar(value=False)
         self.action = None
 
@@ -86,7 +85,7 @@
     def load_dice_images(self):
         for i in range(1, 7):
 
-            img = Image.open(f"../Images/dice{i}.png")
+            img = Image.open(f"/Images/dice{i}.png")
             img = img.resize((60, 60))
             self.dice_images[i] = ImageTk.PhotoImage(img)
 
